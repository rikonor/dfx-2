name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release"
        required: true
        type: string

permissions:
  contents: write

env:
  CLI_NAME: icp-cli

jobs:
  build-cli:
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            runs-on: macos-latest
            variant: standard

          - target: x86_64-apple-darwin
            runs-on: macos-latest
            variant: standard

          - target: x86_64-unknown-linux-gnu
            runs-on: ubuntu-latest
            variant: standard

          - target: x86_64-pc-windows-msvc
            runs-on: windows-2025
            variant: standard

          - target: x86_64-apple-darwin
            runs-on: macos-latest
            variant: homebrew
            build_args: "--features homebrew --config prefix=/usr/local/homebrew"

    runs-on: ${{ matrix.runs-on }}

    steps:
      - uses: actions/checkout@v4

      - name: Build CLI
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --package icp-cli --target ${{ matrix.target }} --release

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/icp*

  build-extensions:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-tools
        run: cargo install wasm-tools

      - name: build multiply
        run: make CARGO_RELEASE=1 EXTENSION_NAME=multiply

      - name: build power
        run: make CARGO_RELEASE=1 EXTENSION_NAME=power

      - uses: actions/upload-artifact@v4
        with:
          name: extensions
          path: |
            target/wasm32-unknown-unknown/release/multiply.component.wasm
            target/wasm32-unknown-unknown/release/power.component.wasm

  create-release:
    needs: [build-cli, build-extensions]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4

      # - name: Prepare Release Assets
      #   run: |
      #     # Move artifacts to release directory
      #     mkdir -p release-assets

      #     # Standard binaries
      #     for TARGET in aarch64-apple-darwin x86_64-apple-darwin x86_64-unknown-linux-gnu x86_64-pc-windows-msvc; do
      #       if [[ "${TARGET}" == *"windows"* ]]; then
      #         mv "${TARGET}-standard"/*exe "release-assets/${CLI_NAME}-${TARGET}.exe"
      #       else
      #         mv "${TARGET}-standard"/* "release-assets/${CLI_NAME}-${TARGET}"
      #       fi
      #     done

      #     # Homebrew binary
      #     mv "x86_64-apple-darwin-homebrew"/* "release-assets/${CLI_NAME}-x86_64-apple-darwin-homebrew"

      #     # Extensions
      #     mv extensions/* release-assets/

      #     # Create mock checksums
      #     cd release-assets
      #     for file in *; do
      #       echo "mock-sha256-${file}" > "${file}.sha256"
      #     done

      # - name: Generate Release Notes
      #   run: |
      #     NOTES=$(mktemp)

      #     CODE_BLOCK='```'

      #     cat > ${NOTES} <<EOF
      #     ## Checksums

      #     ${CODE_BLOCK}
      #     $(cat ${CHECKSUMS})
      #     ${CODE_BLOCK}
      #     EOF

      #     echo "NOTES=${NOTES}" >> "${GITHUB_ENV}"

      # - name: Check for empty files
      #   run: |
      #     find release-assets -type f -size 0 -print

      # - name: Create Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     name: v${{ inputs.version }}
      #     tag_name: v${{ inputs.version }}
      #     files: release-assets/*
      #     draft: true

      # - uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda
      #   with:
      #     name: v${{ env.RELEASE_TAG }}
      #     tag_name: v${{ env.RELEASE_TAG }}
      #     body_path: ${{ env.NOTES }}
      #     files: ${{ env.ARTIFACTS }}

  distribution:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - run: echo "Triggering distribution for version ${{ inputs.version }}"

  distribution-quick-install:
    needs: distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/distribution/quick-install
        with:
          version: ${{ inputs.version }}

  distribution-apt:
    needs: distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/distribution/apt
        with:
          version: ${{ inputs.version }}

  distribution-homebrew:
    needs: distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/distribution/homebrew
        with:
          version: ${{ inputs.version }}
